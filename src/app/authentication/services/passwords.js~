angular.module('webmail.authentication', ['ngRoute', 'webmail.commons'])
  .factory('passwords', passwords);
function passwords($q) {
    algo = 'aes256';
    const symmKey = openpgp.crypto.generateSessionKey(algo);
    const rndm = openpgp.crypto.getPrefixRandom(algo);
    
    const repeat = new Uint8Array([rndm._v[rndm._v.length - 2], rndm._v[rndm._v.length - 1]]);
    const prefix = openpgp.util.concatUint8Array([rndm._v, repeat]);
    //}
    
    function encryptPassword(password/*, userName, modulus*/) {
	
	const encryptedPassword = openpgp.crypto.cfb.encrypt(rndm._v, algo, openpgp.util.str_to_Uint8Array(password), symmKey._v, false);
		
	return encryptedPassword;
    }
    
    function decryptPassword(encrypted) {
	decryptedPassword = openpgp.decrypt(options)
	/*.then(function(plaintext) {
	return plaintext.data
	});*/
	
	const decrypted = openpgp.crypto.cfb.decrypt(algo, symmKey._v, encrypted, false);
	
	const decryptedPassword = openpgp.util.Uint8Array_to_str(decrypted);
	
	return decryptedPassword;
    }

    function cleanUsername(name) {
        return name.replace(/\.|-|_/g, '').toLowerCase();
    }

    function bcrypt(str, salt) {
	const deferred = $q.defer();
	//console.log(str);
	//console.log(salt);
	//console.log(dcodeIO.bcrypt.hash(str, salt));
	dcodeIO.bcrypt.hash(str, salt, function(err, hash) {
		if (typeof hash !== 'string') {
		    deferred.reject(err);
		} else {
		    deferred.resolve(hash);
		}
		});
	return deferred.promise;
    }

    function expandHash(str) {
	return openpgp.util.concatUint8Array([
			openpgp.crypto.hash.sha512(pmcrypto.binaryStringToArray(str + '\x00')),
			openpgp.crypto.hash.sha512(pmcrypto.binaryStringToArray(str + '\x01')),
			openpgp.crypto.hash.sha512(pmcrypto.binaryStringToArray(str + '\x02')),
			openpgp.crypto.hash.sha512(pmcrypto.binaryStringToArray(str + '\x03'))
	       ]);
    }

    const hashPasswordVersion = {
	4(password, salt, modulus) {
            return hashPasswordVersion[3](password, salt, modulus);
        },
	
	3(password, salt, modulus) {
	    const saltBinary = pmcrypto.binaryStringToArray(salt + 'webmail');
	    // We use the latest version of bcrypt, 2y, with 2^10 rounds.
	    return bcrypt(password, '$2y$10$' + dcodeIO.bcrypt.encodeBase64(saltBinary, 16)).then(function (unexpandedHash) {
		return expandHash(unexpandedHash + pmcrypto.arrayToBinaryString(modulus))
		    });
	    //unexpandedHash = unexpandedHash + pmcrypto.arrayToBinaryString(modulus);
	    // return expandHash(unexpandedHash);
	},
	
	2(password, username, modulus) {
            return hashPasswordVersion[1](password, cleanUsername(username), modulus);
        },
	
	1(password, userName, modulus) {
	    //console.log(password);
	    //console.log(userName);
	    //console.log(modulus);
            const salt = openpgp.crypto.hash.md5(pmcrypto.binaryStringToArray(pmcrypto.encode_utf8(userName.toLowerCase())));
            var encodedSalt = '';
            for (var i = 0; i < salt.length; i++) {
                var byte = salt[i].toString(16);
                if (byte.length === 1) {
                    byte = '0' + byte;
                }
                encodedSalt += byte;
            }
            // See hash version 3 for explanation of the prefix                                     

	    console.log(password);
	    console.log(encodedSalt);
	    return bcrypt(pmcrypto.arrayToBinaryString(password), '$2y$10$' + encodedSalt).then(function (unexpandedHash) {
		    return expandHash(unexpandedHash + pmcrypto.arrayToBinaryString(modulus));
		});
        },
	
	0(password, userName, modulus) {
            const prehashed = pmcrypto.encode_base64(
						     pmcrypto.arrayToBinaryString(
										  openpgp.crypt.hash.sha512(pmcrypt.binaryStringToArray(userName.toLowerCase() + pmcrypto.encode_utf8(password)))
										  )
						     );
            return hashPasswordVersion[1](prehashed, userName, modulus);
	}
    };
    
    const api = {
	currentAuthVersion: 4,
	cleanUsername,
	hashPassword(version, password, salt, userName, modulus) {
	    switch (version) {
	    case 4:
	    case 3:
	    return hashPasswordVersion[version](password, salt, modulus);
	    case 2:
	    case 1:
	    case 0:
	    return hashPasswordVersion[version](password, userName, modulus);
	    default:
	    $q.reject({ message: 'Unsupported auth version' });
	    //gettextCatalog.getString('Unsupported auth version', null, 'Error') });
	    break;
	    }
	},
	encryptPassword,
	decryptPassword 
    }

    return api;
};