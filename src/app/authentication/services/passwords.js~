angular.module('webmail')
  .factory('passwords', passwords);
function passwords($q, webcrypto) {

    function bcrypt(str, salt) {
	const deferred = $q.defer();
	dcodeIO.bcrypt.hash(str, salt, function(err, hash) {
		if (typeof hash !== 'string') {
		    deferred.reject(err);
		} else {
		    deferred.resolve(hash);
		}
		});
	return deferred.promise;
    }

    function expandHash(str) {
	return openpgp.util.concatUint8Array([
			openpgp.crypto.hash.sha512(openpgp.util.str_to_Uint8Array(str + '\x00')),
			openpgp.crypto.hash.sha512(openpgp.util.str_to_Uint8Array(str + '\x01')),
			openpgp.crypto.hash.sha512(openpgp.util.str_to_Uint8Array(str + '\x02')),
			openpgp.crypto.hash.sha512(openpgp.util.str_to_Uint8Array(str + '\x03'))
						   ]);
    }
    
    const hashPasswordVersion = {
	4(password, salt, modulus) {
	    return hashPasswordVersion[3](password, salt, modulus);
        },
	
	3(password, salt, modulus) {
	    const saltBinary = pmcrypto.binaryStringToArray(salt + 'proton');
	    // We use the latest version of bcrypt, 2y, with 2^10 rounds.
	    return bcrypt(password, '$2y$10$' + dcodeIO.bcrypt.encodeBase64(saltBinary, 16)).then(function (unexpandedHash) {
		    return expandHash(unexpandedHash + openpgp.util.Uint8Array_to_str(modulus))
		    });
	},
	
	2(password, userName, modulus) {
            return hashPasswordVersion[1](password, cleanUsername(userName), modulus);
        },
	
	1(password, userName, modulus) {
            const salt = openpgp.crypto.hash.md5(openpgp.util.str_to_Uint8Array(openpgp.util.encode_utf8(userName.toLowerCase())));
            var encodedSalt = '';
            for (var i = 0; i < salt.length; i++) {
                var byte = salt[i].toString(16);
                if (byte.length === 1) {
                    byte = '0' + byte;
                }
                encodedSalt += byte;
            }
            // See hash version 3 for explanation of the prefix                                     
	    return bcrypt(password, '$2y$10$' + encodedSalt).then(function (unexpandedHash) {
		    return expandHash(unexpandedHash + openpgp.util.Uint8Array_to_str(modulus));
		});
        },
	
	0(password, userName, modulus) {
            const prehashed = pmcrypto.encode_base64(openpgp.util.Uint8Array_to_str(openpgp.crypto.hash.sha512(openpgp.util.str_to_Uint8Array(userName.toLowerCase() + openpgp.util.encode_utf8(password)))));
            return hashPasswordVersion[1](prehashed, userName, modulus);
	}
    };
    
    const api = {
	currentAuthVersion: 4,
	expandHash,
	hashPassword(version, password, salt, userName, modulus) {
	    switch (version) {
	    case 4:
	    case 3:
	    return hashPasswordVersion[version](password, salt, modulus);
	    case 2:
	    case 1:
	    case 0:
	    return hashPasswordVersion[version](password, userName, modulus);
	    default:
	    break;
	    }
	}
    }
    
    return api;
};
